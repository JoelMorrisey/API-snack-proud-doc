{
  "openapi": "3.0.1",
  "info": {
    "title": "Snack Proud API",
    "description": "This is an API created for the Snack Proud web application only.\n\nScreen sets are the same as labeled in figma file.\n\nThe screen numbers are from left to right as contained in the figma file.\n\nAll API and service listings in the table are clickable and will jump you to the related API.\n\n<table>\n  <thead>\n     <tr>\n        <th>Screen set</th>\n        <th>Screen numbers</th>\n        <th>Service/APIs</th>\n     </tr>\n  </thead>\n  <tbody>\n     <tr>\n        <td><b>Account setup</b></td>\n        <td></td>\n        <td></td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>1</td>\n        <td><b>NONE</b></td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>2-4</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://auth0.com/\">Auth0 - authentication</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>5-11</td>\n        <td>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/3-Seller-Registration/paths/~1account~1register~1individual/post\">POST - /account/register/individual</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td><b>Setting up box</b></td>\n        <td></td>\n        <td></td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>1</td>\n        <td><b>NONE</b></td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>2</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}/get\">GET - /seller/boxes/:box_id</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}~1doneSetup/patch\">PATCH - /seller/boxes/:box_id/doneSetup</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1boxes~1{box_id}~1products/get\">GET - /seller/boxes/:box_id/products</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes/get\">GET - /seller/boxes</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}/patch\">PATCH - /seller/boxes</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products/patch\">PATCH - /seller/products</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products~1active~1{snack_id}/patch\">PATCH - /seller/products/active/{snack_id}</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>3</td>\n        <td>\n           <b>Services:</b> \n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b>\n           <ul>\n              <li><a href=\"#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}/get\">GET - /seller/boxes/:box_id</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1boxes~1{box_id}~1products/get\">GET - /seller/boxes/:box_id/products</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes/get\">GET - /seller/boxes</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}~1stats/get\">GET - /seller/boxes/stats</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}/patch\">PATCH - /seller/boxes</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products/patch\">PATCH - /seller/products</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products~1active~1{snack_id}/patch\">PATCH - /seller/products/active/{snack_id}</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>4</td>\n        <td>\n           <b>Services:</b> \n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b>\n           <ul>\n              <li><a href=\"/#tag/5-Seller-Dashboard/paths/~1seller~1dashboard~1overview/get\">GET - /seller/dashboard/overview</a></li>\n              <li><a href=\"/#tag/5-Seller-Dashboard/paths/~1seller~1dashboard~1leaderboard/get\">GET - /seller/ dashboard/leaderboard</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}~1stats/get\">GET - /seller/boxes?stats=true</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products~1active~1{snack_id}/patch\">PATCH - /seller/products/active/{snack_id}</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>5</td>\n        <td><b>NONE</b></td>\n     </tr>\n     <tr>\n        <td><b>Coming back in future</b></td>\n        <td></td>\n        <td></td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>1</td>\n        <td>\n           <b>Services:</b> \n           <ul>\n              <li><a href=\"https://auth0.com/\">Auth0 - authentication</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>2</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/5-Seller-Dashboard/paths/~1seller~1dashboard~1overview/get\">GET - /seller/dashboard/overview</a></li>\n              <li><a href=\"/#tag/5-Seller-Dashboard/paths/~1seller~1dashboard~1leaderboard/get\">GET - /seller/ dashboard/leaderboard</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}~1stats/get\">GET - /seller/boxes?stats=true</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>3</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}/get\">GET - /seller/boxes/:box_id</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1boxes~1{box_id}~1products/get\">GET - /seller/boxes/:box_id/products</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes/get\">GET - /seller/boxes</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}/patch\">PATCH - /seller/boxes</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products/patch\">PATCH - /seller/products</a></li>\n              <li><a href=\"/#tag/7-Seller-Product/paths/~1seller~1products~1active~1{snack_id}/patch\">PATCH - /seller/products/active/{snack_id}</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>4</td>\n        <td>\n           <b>Services:</b> \n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/8-Seller-Buy-Product/paths/~1seller~1snackproud~1products~1{box_id}/get\">GET - /seller/snackproud/products/:box_id</a></li>\n              <li><a href=\"/#tag/8-Seller-Buy-Product/paths/~1seller~1snackproud~1MonthlyRefill~1{box_id}/get\">GET - /seller/snackproud/MonthlyRefill/:box_id</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes/get\">GET - /seller/boxes?stats=true</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>5-6</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b>\n           <ul>\n              <li><a href=\"/#tag/8-Seller-Buy-Product/paths/~1seller~1snackproud~1products~1order/post\">POST - /seller/snackproud/products/order</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}~1delivery/get\">GET - /seller/boxes/:box_id/delivery</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes~1{box_id}~1delivery/patch\">PATCH - /seller/boxes/:box_id/delivery</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>7</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://cloudinary.com/\">Cloudinary - Image urls</a></li>\n           </ul>\n           <b>APIs:</b>\n           <ul>\n              <li><a href=\"/#tag/8-Seller-Buy-Product/paths/~1seller~1snackproud~1products~1{box_id}/get\">GET - /seller/snackproud/products/:box_id</a></li>\n              <li><a href=\"/#tag/8-Seller-Buy-Product/paths/~1seller~1snackproud~1MonthlyRefill~1{box_id}/get\">GET - /seller/snackproud/MonthlyRefill/:box_id</a></li>\n              <li><a href=\"/#tag/6-Seller-Box/paths/~1seller~1boxes/get\">GET - /seller/boxes/:box_id?stats=true</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td><b>Account Management</b></td>\n        <td></td>\n        <td></td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>1-2</td>\n        <td>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1userData/get\">GET - /account/userData</a></li>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1userData/patch\">PATCH - /account/userData</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>3-4</td>\n        <td>\n           <b>Services:</b>\n           <ul>\n              <li><a href=\"https://auth0.com/\">Auth0 - authentication</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>5</td>\n        <td>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1deliveryData/get\">GET - /account/deliveryData</a></li>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1deliveryData/patch\">PATCH - /account/deliveryData</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>6</td>\n        <td>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1orderHistory/get\">GET - /account/orderHistory</a></li>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1orderHistory~1{order_id}~1items/get\">GET - /account/orderHistory/{order_id}/items</a></li>\n           </ul>\n        </td>\n     </tr>\n     <tr>\n        <td></td>\n        <td>7</td>\n        <td>\n           <b>APIs:</b> \n           <ul>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1userData/get\">GET - /account/userData</a></li>\n              <li><a href=\"/#tag/4-Seller-Account-management/paths/~1account~1userData/patch\">PATCH - /account/userData</a></li>\n           </ul>\n        </td>\n     </tr>\n  </tbody>\n</table>",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://snack-proud.herokuapp.com",
      "description": "Internet facing testing version of the API."
    },
    {
      "url": "http://localhost:5000",
      "description": "Local testing version of the API."
    }
  ],
  "tags": [
    {
      "name": "1 - Buyer - Box",
      "description": "Box APIs for buyers"
    },
    {
      "name": "2 - Buyer - Payment",
      "description": "Payment APIs for Buyers"
    },
    {
      "name": "3 - Seller - Registration",
      "description": "Account creation APIs"
    },
    {
      "name": "4 - Seller - Account management",
      "description": "Account data APIs"
    },
    {
      "name": "5 - Seller - Dashboard",
      "description": "Dashboard APIs for seller"
    },
    {
      "name": "6 - Seller - Box",
      "description": "Box APIs for seller"
    },
    {
      "name": "7 - Seller - Product",
      "description": "Product APIs for seller"
    },
    {
      "name": "8 - Seller - Buy Product",
      "description": "APIs to order products to add to a box"
    },
    {
      "name": "9 - Seller - Buy Box",
      "description": "APIs to order boxes"
    },
    {
      "name": "10 - Authentication",
      "description": "APIs to do custom Auth0 functionality"
    }
  ],
  "paths": {
    "/buyer/box/{box_id}": {
      "get": {
        "tags": [
          "1 - Buyer - Box"
        ],
        "summary": "1.1 - Get a box for a buyer",
        "description": "Get box details including the _id (this is just the box_ID), name, and all the active products inside the box.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The id of the box to retrieve.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The box information with all products contained inside the box",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                },
                "example": {
                  "_id": "5ffd695b1c9940890281f1aa",
                  "name": "Test box 1",
                  "products": [
                    {
                      "_id": "6036316c91c3a71f255544ad",
                      "price": 425,
                      "available": 10000,
                      "name": "Choc Not Choc, Mint Brownie ball",
                      "description": "Snack Proud raw chocolate truffles are very indulgent and delicious and taste like an after-dinner mint brownie.\nThere are chocolate chunks and coconut chips in the middle. Safely portion-controlled so you can keep one in their handbag to have between meetings.",
                      "variant": "chocolate",
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1610438688/Snack-Proud-Choc-Mint-Truffle.png",
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": true,
                        "nut_free": false,
                        "dairy_free": true
                      }
                    },
                    {
                      "_id": "6036394306a138204d1b79be",
                      "price": 655,
                      "available": 1000,
                      "name": "Googys, Collagen Protein Bar",
                      "description": "Enjoy the new Googys Collagen Bar, with low in carbohydrates, high in protein & good fats",
                      "variant": "Mixed Berry",
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1611653365/googys-collagen-bar-mixed-berry_h2jcml.png",
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": false,
                        "nut_free": false,
                        "dairy_free": true
                      }
                    },
                    {
                      "_id": "603639f3d9ea062581df00b3",
                      "price": 180,
                      "available": 13,
                      "name": "Snack-Proud-Edamame",
                      "description": "This is a great snack to munch on like peanuts or a yummy topping to salads too for extra crunch.",
                      "variant": "Choc Raspberry",
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1611203187/Snack-Proud-Edamame.png",
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": true,
                        "nut_free": true,
                        "dairy_free": true
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/payment/intent/": {
      "post": {
        "tags": [
          "2 - Buyer - Payment"
        ],
        "summary": "2.1 - Make an intent to purchase products using Stripe",
        "description": "This api will return a client_secret for a payment_intent (This is a Stripe connect feature). \n\n For more information please go to: \n\n <a>https://stripe.com/docs/connect/collect-then-transfer-guide</a>. \n\n <b>NOTE:</b> This token is only valid 24 hours after creation. \n\n <b>The test publishable api key required is:</b> \n\n pk_test_51HfgNBHHvC6AAOnBFVXNbh6fRHjkQGpDdJIyaWrBQndSa8tpaol8I2RXrerNIM6AHT1pDXJIoNL0M6WjcSe4Tzap00ncgMYOt1  ",
        "requestBody": {
          "description": "A cart object of all the items to buy",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "working",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          }
        }
      }
    },
    "/account/pending/{pending_account_id}": {
      "get": {
        "tags": [
          "3 - Seller - Registration"
        ],
        "summary": "3.1 - Get prefilled account information from code",
        "description": "Create a stripe account for a individual with the details given",
        "parameters": [
          {
            "name": "pending_account_id",
            "in": "path",
            "description": "The pending account id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got pending account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_2"
                },
                "example": {
                  "user": {
                    "first_name": "John",
                    "last_name": "Doe",
                    "contact_number": "1234567890",
                    "email": "example@example.com",
                    "dob": {
                      "day": 10,
                      "month": 11,
                      "year": 2000
                    },
                    "address": {
                      "address_line1": "Some address",
                      "address_line2": "12",
                      "country": "Australia",
                      "city": "Sydney",
                      "state": "NSW",
                      "zip": "2222"
                    },
                    "account_for": "Personal",
                    "account_for_name": "Jimmy's private shop",
                    "fundraising_name": "My fundraiser",
                    "bank_bsb": "110000",
                    "bank_account_number": "000123456"
                  },
                  "delivery": {
                    "address": {
                      "address_line1": "Some address 2",
                      "address_line2": "13",
                      "country": "Australia",
                      "city": "Sydney",
                      "state": "NSW",
                      "zip": "2222"
                    },
                    "instructions": "Some instructions",
                    "name": "John doe",
                    "phone": "000000000",
                    "email": "example1@example.com"
                  },
                  "box_details": {
                    "preset_box_ID": "5ffc1cf7820e93259f6a4d97",
                    "name": "new Box"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Could not find pending account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Could not find pending account"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account/register/individual": {
      "post": {
        "tags": [
          "3 - Seller - Registration"
        ],
        "summary": "3.2 - Set up account",
        "description": "Create a account for a individual with the details given",
        "requestBody": {
          "description": "Data to create account with.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/body_1"
              },
              "encoding": {
                "personal_identification": {
                  "contentType": "image/png, image/jpeg, application/pdf",
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account has been successfully created."
          },
          "206": {
            "description": "Account has been created, box creation however failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Unable to delete pending account": {
                    "summary": "Unable to delete pending account",
                    "value": {
                      "message": "Something went wrong but you don't need to worry you have your account, we'll solve the issue!"
                    }
                  },
                  "Unable to delete create box": {
                    "summary": "Unable to delete create box",
                    "value": {
                      "message": "Something went wrong, your account was created however we were unable to create box for your account automatically please contact Snack Proud"
                    }
                  },
                  "Submitted box creation info without pending account ID": {
                    "summary": "Submitted box creation info without pending account ID",
                    "value": {
                      "message": "Could not create box as either preset_box_ID, box_name or pending_acc_id was missing"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "single feild": {
                    "summary": "example of a single invalid feild",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "address.address_line1"
                      ],
                      "reasons": [
                        {
                          "feild": "address.address_line1",
                          "message": "Path 'address.address_line1' is required.",
                          "input_given": ""
                        }
                      ]
                    }
                  },
                  "many feilds": {
                    "summary": "example of many invalid feild",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "address.address_line1",
                        "address.country",
                        "address.city",
                        "address.state",
                        "address.zip",
                        "name",
                        "email"
                      ],
                      "reasons": [
                        {
                          "feild": "address.address_line1",
                          "message": "Path `address.address_line1` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.country",
                          "message": "Path `address.country` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.city",
                          "message": "Path `address.city` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.state",
                          "message": "Path `address.state` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.zip",
                          "message": "Path `address.zip` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "name",
                          "message": "Path `name` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "email",
                          "message": "Must provide a valid email",
                          "input_given": "examplee.com"
                        }
                      ]
                    }
                  },
                  "Invalid user data": {
                    "summary": "Invalid user data",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "first_name",
                        "last_name",
                        "dob",
                        "address.line1",
                        "address.country",
                        "address.city",
                        "address.state",
                        "address.zip",
                        "account_for",
                        "account_for_name",
                        "contact_number",
                        "email"
                      ],
                      "reasons": [
                        {
                          "feild": "first_name",
                          "message": "Path `first_name` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "last_name",
                          "message": "Path `last_name` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "dob",
                          "message": "Must be a valid date",
                          "input_given": "2022-02-07T13:00:00.000Z"
                        },
                        {
                          "feild": "address.line1",
                          "message": "Path `address.line1` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.country",
                          "message": "Path `address.country` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.city",
                          "message": "Path `address.city` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.state",
                          "message": "Path `address.state` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.zip",
                          "message": "Path `address.zip` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "account_for",
                          "message": "Must provide what the account is for",
                          "input_given": ""
                        },
                        {
                          "feild": "account_for_name",
                          "message": "Must provide account name for choosen accout_for",
                          "input_given": ""
                        },
                        {
                          "feild": "contact_number",
                          "message": "Path `contact_number` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "email",
                          "message": "Must provide a valid email",
                          "input_given": "1.com"
                        }
                      ]
                    }
                  },
                  "Invalid delivery data": {
                    "summary": "Invalid delivery data",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "address.address_line1",
                        "address.country",
                        "address.city",
                        "address.state",
                        "address.zip",
                        "name",
                        "email"
                      ],
                      "reasons": [
                        {
                          "feild": "address.address_line1",
                          "message": "Path `address.address_line1` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.country",
                          "message": "Path `address.country` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.city",
                          "message": "Path `address.city` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.state",
                          "message": "Path `address.state` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.zip",
                          "message": "Path `address.zip` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "name",
                          "message": "Path `name` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "email",
                          "message": "Must provide a valid email",
                          "input_given": "examplee.com"
                        }
                      ]
                    }
                  },
                  "Invalid account for data": {
                    "summary": "Invalid account for data",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "account_for"
                      ],
                      "reasons": [
                        {
                          "feild": "account_for",
                          "message": "The account_for is required to be either Personal or Business",
                          "input_given": "P"
                        }
                      ]
                    }
                  },
                  "Account already exists": {
                    "summary": "Account already exists",
                    "value": {
                      "message": "User data already created, try using update instead"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account/userData": {
      "get": {
        "tags": [
          "4 - Seller - Account management"
        ],
        "summary": "4.1 - Get user data",
        "description": "Get all the users data stored",
        "responses": {
          "200": {
            "description": "Successfully retrieved user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_data"
                },
                "example": {
                  "first_name": "Jimmy",
                  "last_name": "john",
                  "dob": "1994-09-09T14:00:00.000Z",
                  "address": {
                    "line1": "address_full_match",
                    "zip": "2017",
                    "city": "Waterloo",
                    "state": "NSW",
                    "country": "AU",
                    "line2": "12"
                  },
                  "account_type": "individual",
                  "account_for": "Personal",
                  "account_for_name": "Jimmy",
                  "fundraising": "Some fun somewhere",
                  "account_num_last_4": "3456",
                  "BSB": "11 0000",
                  "contact_number": "0000000000",
                  "email": "e@e.com",
                  "image_name": "success.png"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "4 - Seller - Account management"
        ],
        "summary": "4.2 - Update user data",
        "description": "Update the users data with new given data",
        "requestBody": {
          "description": "New user data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/body_2"
              },
              "encoding": {
                "personal_identification": {
                  "contentType": "image/png, image/jpeg, application/pdf",
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user data"
          },
          "400": {
            "description": "Invalid input provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Invalid date": {
                    "summary": "Invalid date of birth",
                    "value": {
                      "message": "Date provided -1/10/1991 is an invalid date"
                    }
                  },
                  "Invalid user data": {
                    "summary": "Invalid user data",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "email",
                        "contact_number",
                        "account_for_name",
                        "account_for",
                        "last_name",
                        "first_name"
                      ],
                      "reasons": [
                        {
                          "feild": "email",
                          "message": "Must provide a valid email",
                          "input_given": "@1.com"
                        },
                        {
                          "feild": "contact_number",
                          "message": "Path `contact_number` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "account_for_name",
                          "message": "Must provide account name for choosen accout_for",
                          "input_given": ""
                        },
                        {
                          "feild": "account_for",
                          "message": "Must provide what the account is for",
                          "input_given": ""
                        },
                        {
                          "feild": "last_name",
                          "message": "Path `last_name` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "first_name",
                          "message": "Path `first_name` is required.",
                          "input_given": ""
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account/deliveryData": {
      "get": {
        "tags": [
          "4 - Seller - Account management"
        ],
        "summary": "4.3 - Get delivery data",
        "description": "Get all the users delivery data",
        "responses": {
          "200": {
            "description": "Successfully retrieved delivery data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delivery_data"
                },
                "example": {
                  "address": {
                    "address_line1": " 300 Floria",
                    "address_line2": "Lilama",
                    "country": "Australia",
                    "city": "Waterloo",
                    "state": "NSW",
                    "zip": "0123"
                  },
                  "instructions": "Some instruction",
                  "name": "john doe",
                  "phone": 398740295,
                  "email": "snacktest@test.com"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "4 - Seller - Account management"
        ],
        "summary": "4.4 - Update delivery data",
        "description": "Update the accounts delivery data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated delivery data"
          },
          "400": {
            "description": "Invalid input provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Invalid data": {
                    "summary": "Invalid account for data",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "address.address_line1",
                        "address.country",
                        "address.city",
                        "address.state",
                        "address.zip",
                        "email",
                        "name"
                      ],
                      "reasons": [
                        {
                          "feild": "address.address_line1",
                          "message": "Path `address.address_line1` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.country",
                          "message": "Path `address.country` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.city",
                          "message": "Path `address.city` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.state",
                          "message": "Path `address.state` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "address.zip",
                          "message": "Path `address.zip` is required.",
                          "input_given": ""
                        },
                        {
                          "feild": "email",
                          "message": "Must provide a valid email",
                          "input_given": "@ss"
                        },
                        {
                          "feild": "name",
                          "message": "Path `name` is required.",
                          "input_given": ""
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account/orderHistory": {
      "get": {
        "tags": [
          "4 - Seller - Account management"
        ],
        "summary": "4.5 - Get order history",
        "description": "Get a users order history for all boxes.",
        "responses": {
          "200": {
            "description": "Successfully retireved order history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inline_response_200_3"
                  }
                },
                "example": [
                  {
                    "_id": "60e65d217a431900154cdd60",
                    "date": "2021-07-08T02:04:17.882Z",
                    "invoice_num": "Pending",
                    "num_of_products": 3,
                    "customer_box": {
                      "_id": "609e23d8c149f8772db5b457",
                      "name": "Level 2 Box",
                      "last_updated": "2021-06-28T07:38:46.916Z"
                    },
                    "products": [
                      {
                        "_id": "603b2f5ad9ea062581df00b5",
                        "price": 12500,
                        "quantity": 3
                      }
                    ]
                  },
                  {
                    "_id": "60e65ccb7a431900154cdd5d",
                    "date": "2021-07-08T02:02:51.674Z",
                    "invoice_num": "Pending",
                    "num_of_products": 3,
                    "customer_box": {
                      "_id": "609e23c3c149f8772db5b456",
                      "name": "Level 1 Box",
                      "last_updated": "2021-06-25T07:33:45.660Z"
                    },
                    "products": [
                      {
                        "_id": "603635cec3e97ce640cd87bd",
                        "price": 3023,
                        "quantity": 1
                      },
                      {
                        "_id": "603b2f5ad9ea062581df00b5",
                        "price": 12500,
                        "quantity": 2
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account/orderHistory/{order_id}/items": {
      "get": {
        "tags": [
          "4 - Seller - Account management"
        ],
        "summary": "4.6 - Get reorder information from past order",
        "description": "Gets the reorder information given the id of a past order.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "The id of the past order",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23d8c149f8772db5b457"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retireved order history item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_4"
                },
                "example": {
                  "box_id": "609e23d8c149f8772db5b457",
                  "cart": [
                    {
                      "product": {
                        "_id": "603b2f5ad9ea062581df00b5",
                        "name": "50 piece",
                        "description": "A collection of delicious snacks for your monthly refill",
                        "price": 12500,
                        "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614571845/monthly-refill-box.png",
                        "type": "Monthly refill",
                        "total_quantity": 30
                      },
                      "quantity": 3
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Could not find order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Order history item does not exist"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/dashboard/overview": {
      "get": {
        "tags": [
          "5 - Seller - Dashboard"
        ],
        "summary": "5.1 - Get stats for dashboard",
        "description": "Get all the stats required for the dashboard.",
        "parameters": [
          {
            "name": "date_enum",
            "in": "query",
            "description": "From what time to compute stats from. (defualt value when not provided is week)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "week",
              "enum": [
                "year",
                "month",
                "week",
                "day"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stats for the dashboard of the authenticated account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_5"
                },
                "example": {
                  "num_of_boxes": 3,
                  "sold": 26,
                  "profit": 4260
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/dashboard/leaderboard": {
      "get": {
        "tags": [
          "5 - Seller - Dashboard"
        ],
        "summary": "5.2 - Get leaderboard",
        "description": "Get the leaderboard for the dashboard.",
        "parameters": [
          {
            "name": "date_enum",
            "in": "query",
            "description": "From what time to compute stats from. (defualt value when not provided is week)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "week",
              "enum": [
                "year",
                "month",
                "week",
                "day"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of the most popular iems over all boxes in decending order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_6"
                },
                "examples": {
                  "Empty leaderboard": {
                    "summary": "Empty leaderboard",
                    "value": []
                  },
                  "Only 3 items in the leaderboard": {
                    "summary": "Only 3 items in the leaderboard",
                    "value": {
                      "leaderboard": [
                        {
                          "sold": 10,
                          "name": "Choc Not Choc, Mint Brownie ball",
                          "variant": "chocolate",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1610438688/Snack-Proud-Choc-Mint-Truffle.png"
                        },
                        {
                          "sold": 9,
                          "name": "Googys, Collagen Protein Bar",
                          "variant": "Mixed Berry",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1611653365/googys-collagen-bar-mixed-berry_h2jcml.png"
                        },
                        {
                          "sold": 7,
                          "name": "Test product 1",
                          "variant": "variant 1",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1620977988/sample%20products/TestProduct1.png"
                        }
                      ]
                    }
                  },
                  "Full leaderboard": {
                    "summary": "Full leaderboard",
                    "value": {
                      "leaderboard": [
                        {
                          "sold": 10,
                          "name": "Choc Not Choc, Mint Brownie ball",
                          "variant": "chocolate",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1610438688/Snack-Proud-Choc-Mint-Truffle.png"
                        },
                        {
                          "sold": 9,
                          "name": "Googys, Collagen Protein Bar",
                          "variant": "Mixed Berry",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1611653365/googys-collagen-bar-mixed-berry_h2jcml.png"
                        },
                        {
                          "sold": 7,
                          "name": "Test product 1",
                          "variant": "variant 1",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1620977988/sample%20products/TestProduct1.png"
                        },
                        {
                          "sold": 5,
                          "name": "Test product 2",
                          "variant": "variant 2",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1620977988/sample%20products/TestProduct2.png"
                        },
                        {
                          "sold": 4,
                          "name": "Test product 3",
                          "variant": "variant 3",
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1620977989/sample%20products/TestProduct3.png"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes": {
      "get": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.1 - Get all owned boxes",
        "description": "Get all boxes owned by the user",
        "parameters": [
          {
            "name": "stats",
            "in": "query",
            "description": "get box stats?",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "date_enum",
            "in": "query",
            "description": "From what time to compute stats from. (defualt value when not provided is week)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "week",
              "enum": [
                "year",
                "month",
                "week",
                "day"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All boxes the user owns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/box_details_seller"
                      },
                      {
                        "$ref": "#/components/schemas/box_stats_seller"
                      }
                    ]
                  }
                },
                "examples": {
                  "stats true": {
                    "summary": "Stats is set to true",
                    "value": [
                      {
                        "_id": "609e23c3c149f8772db5b456",
                        "name": "Level 1 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-06-25T07:33:45.660Z",
                        "most_popular": "Choc Not Choc, Mint Brownie ball",
                        "sold": 15,
                        "profit": 2820,
                        "available": 57
                      },
                      {
                        "_id": "609e23d8c149f8772db5b457",
                        "name": "Level 2 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-06-28T07:38:46.916Z",
                        "most_popular": "Googys, Collagen Protein Bar",
                        "sold": 4,
                        "profit": 600,
                        "available": 56
                      },
                      {
                        "_id": "609e23f7c149f8772db5b458",
                        "name": "Level 3 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-07-05T07:11:29.866Z",
                        "most_popular": "Test product 1",
                        "sold": 7,
                        "profit": 840,
                        "available": 50
                      }
                    ]
                  },
                  "no stats": {
                    "summary": "Stats not set",
                    "value": [
                      {
                        "_id": "609e23c3c149f8772db5b456",
                        "name": "Level 1 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-06-25T07:33:45.660Z"
                      },
                      {
                        "_id": "609e23d8c149f8772db5b457",
                        "name": "Level 2 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-06-28T07:38:46.916Z"
                      },
                      {
                        "_id": "609e23f7c149f8772db5b458",
                        "name": "Level 3 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-07-05T07:11:29.866Z"
                      }
                    ]
                  },
                  "stats false": {
                    "summary": "Stats is set to false",
                    "value": [
                      {
                        "_id": "609e23c3c149f8772db5b456",
                        "name": "Level 1 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-06-25T07:33:45.660Z"
                      },
                      {
                        "_id": "609e23d8c149f8772db5b457",
                        "name": "Level 2 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-06-28T07:38:46.916Z"
                      },
                      {
                        "_id": "609e23f7c149f8772db5b458",
                        "name": "Level 3 Box",
                        "new": false,
                        "topping_up": false,
                        "last_updated": "2021-07-05T07:11:29.866Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes/{box_id}": {
      "get": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.2 - Get a box's details",
        "description": "Get the details of a box with the given ID if box is owned.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The id of the box to get details of",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of a specific box",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/box_details_seller"
                },
                "example": {
                  "_id": "609e23c3c149f8772db5b456",
                  "name": "Level 1 Box",
                  "new": false,
                  "topping_up": false,
                  "last_updated": "2021-06-25T07:33:45.660Z"
                }
              }
            }
          },
          "404": {
            "description": "Could not find box",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.3 - update box details",
        "description": "update a given boxes details",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The id of the box to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "requestBody": {
          "description": "All boxes the user owns",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_4"
              },
              "example": {
                "name": "box 1",
                "new": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Box was updated successfully"
          },
          "400": {
            "description": "Invalid input provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "invalid name": {
                    "summary": "invalid name",
                    "value": {
                      "message": "One or more feilds are invalid",
                      "feilds": [
                        "name"
                      ],
                      "reasons": [
                        {
                          "feild": "name",
                          "message": "must be a valid name",
                          "input_given": ""
                        }
                      ]
                    }
                  },
                  "invalid new format": {
                    "summary": "New feild provided in invalid format",
                    "value": {
                      "message": "Feild new was given in an invalid format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Could not find box",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes/{box_id}/delivery": {
      "get": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.4 - Get box delivery details",
        "description": "Get the delivery details for a given box or returns the account details if a box does not have any delivery information attached to it.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The box id to get delivery details for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery details of the box.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delivery_data"
                },
                "example": {
                  "address": {
                    "address_line1": "address_full_match",
                    "address_line2": "12",
                    "country": "AU",
                    "city": "Waterloo",
                    "state": "NSW",
                    "zip": "2017"
                  },
                  "instructions": "Some instructions",
                  "name": "Jim john",
                  "phone": "0000000000",
                  "email": "e@gmail.com"
                }
              }
            }
          },
          "404": {
            "description": "Delivery details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Delivery data not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.5 - Update box delivery details",
        "description": "Update the delivery details for a given box.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The box id to update the delivery details for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "requestBody": {
          "description": "All boxes the user owns",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery_data"
              },
              "example": {
                "address": {
                  "address_line1": "1 someWhere street",
                  "address_line2": "12",
                  "city": "Sydney",
                  "country": "AU",
                  "state": "NSW",
                  "zip": 2000
                },
                "instructions": "Some instructions",
                "name": "Jim john",
                "phone": "0000000000",
                "email": "e@gmail.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The box updated successfully"
          },
          "400": {
            "description": "Invalid delivery data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "One or more feilds are invalid",
                  "feilds": [
                    "email"
                  ],
                  "reasons": [
                    {
                      "feild": "email",
                      "message": "Must provide a valid email",
                      "input_given": "cd"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Delivery data not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes/{box_id}/stats": {
      "get": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.6 - Get stats of a given box",
        "description": "Get the stats of a given box.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The box id to get stats for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          },
          {
            "name": "date_enum",
            "in": "query",
            "description": "From what time to compute stats from. (defualt value when not provided is week)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "week",
              "enum": [
                "year",
                "month",
                "week",
                "day"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The boxes stats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/box_specific_stats_seller"
                },
                "example": {
                  "_id": "609e23c3c149f8772db5b456",
                  "total_sold_since_update": 0,
                  "total_profit_since_update": 0,
                  "sold": 15,
                  "profit": 2820,
                  "available": 57,
                  "has_made_sale": true
                }
              }
            }
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes/{box_id}/doneSetup": {
      "patch": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.7 - Set box as setup",
        "description": "Sets the new flag to false. This is just a more light weight version of update to the box api.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The id of the box to set as setup",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The boxes new flag has been set to false"
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes/{box_id}/resetTopup": {
      "patch": {
        "tags": [
          "6 - Seller - Box"
        ],
        "summary": "6.8 - Reset the last topup date",
        "description": "Set the last topup date to the current date for the given box.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The id of the box this is in reference to",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The boxes last topup date has been set"
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/boxes/{box_id}/products": {
      "get": {
        "tags": [
          "7 - Seller - Product"
        ],
        "summary": "7.1 - Get products inside box",
        "description": "Get all customer products inside a given box",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "The box id to get products from",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          },
          {
            "name": "date_enum",
            "in": "query",
            "description": "From what time to compute stats from. (defualt value when not provided is week)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "week",
              "enum": [
                "year",
                "month",
                "week",
                "day"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all the products inside the box",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/product_details_for_buyer_in_box"
                      }
                    ]
                  }
                },
                "example": {
                  "products": [
                    {
                      "_id": "609e27337a0051125123c313",
                      "name": "Choc Not Choc, Mint Brownie ball",
                      "variant": "chocolate",
                      "description": "Snack Proud raw chocolate truffles are very indulgent and delicious and taste like an after-dinner mint brownie.\\nThere are chocolate chunks and coconut chips in the middle. Safely portion-controlled so you can keep one in their handbag to have between meetings.",
                      "active": true,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1610438688/Snack-Proud-Choc-Mint-Truffle.png",
                      "price": 55,
                      "available": 5,
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": true,
                        "nut_free": false,
                        "dairy_free": true
                      },
                      "rrp": 425,
                      "high_rrp": 590,
                      "low_rrp": 425,
                      "sold": 10,
                      "request_count": 0
                    },
                    {
                      "_id": "609e27337a0051125123c314",
                      "name": "Googys, Collagen Protein Bar",
                      "variant": "Mixed Berry",
                      "description": "Enjoy the new Googys Collagen Bar, with low in carbohydrates, high in protein & good fats",
                      "active": true,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1611653365/googys-collagen-bar-mixed-berry_h2jcml.png",
                      "price": 375,
                      "available": 9,
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": false,
                        "nut_free": false,
                        "dairy_free": true
                      },
                      "rrp": 375,
                      "high_rrp": 500,
                      "low_rrp": 325,
                      "sold": 5,
                      "request_count": 0
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/products": {
      "patch": {
        "tags": [
          "7 - Seller - Product"
        ],
        "summary": "7.2 - Update many customer products",
        "description": "Update one or more products. For preformance reasons it is preferable if only items that need to be updated are passed here.",
        "requestBody": {
          "description": "List of products to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_5"
              },
              "examples": {
                "single update": {
                  "summary": "Single update",
                  "value": {
                    "updates": [
                      {
                        "_id": "609e27337a0051125123c313",
                        "available": 11,
                        "active": false,
                        "price": 655
                      }
                    ]
                  }
                },
                "Many updates": {
                  "summary": "Many updates",
                  "value": {
                    "updates": [
                      {
                        "_id": "609e27337a0051125123c313",
                        "available": 11,
                        "active": false,
                        "price": 655
                      },
                      {
                        "_id": "609e27337a0051125123c314",
                        "available": 5,
                        "active": true,
                        "price": 300
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All products updated successfully."
          },
          "206": {
            "description": "Some or all products failed to update.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/error"
                  }
                },
                "examples": {
                  "All failed": {
                    "summary": "All updates failed",
                    "description": "All errors are in the order of the array given",
                    "value": [
                      {
                        "success": false,
                        "message": "Unable to find product"
                      },
                      {
                        "success": false,
                        "message": "Unable to find product"
                      }
                    ]
                  },
                  "Some failed": {
                    "summary": "Some updates failed",
                    "description": "All items are in the order of the array given",
                    "value": [
                      {
                        "success": false,
                        "message": "Unable to find product"
                      },
                      {
                        "success": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/products/active/{snack_id}": {
      "patch": {
        "tags": [
          "7 - Seller - Product"
        ],
        "summary": "7.3 - Activate/Deactivate product",
        "description": "The api will toggle the activate state of the product with the given id.",
        "parameters": [
          {
            "name": "snack_id",
            "in": "path",
            "description": "Product to set as active",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e27337a0051125123c313"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Active state to set product to",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The product's active state was successfuly set"
          },
          "404": {
            "description": "Product does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Unable to find product"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/snackproud/products/{box_id}": {
      "get": {
        "tags": [
          "8 - Seller - Buy Product"
        ],
        "summary": "8.1 - Get products avaliable to restock with.",
        "description": "Get list of products that seller can buy.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "id of the box this list is relivant to.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with containing a list of item a seller can buy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products_to_buy_seller"
                },
                "example": {
                  "products": [
                    {
                      "_id": "603635cec3e97ce640cd87bd",
                      "name": "50 pack of Choc Not Choc, Mint Brownie ball",
                      "description": "50 Delicious Choc Not Choc, Mint Brownie ball ",
                      "price": 3023,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614572173/50-pack-of-Choc-Not-Choc-Mint-Brownie-ball.jpg",
                      "preset_products": [
                        {
                          "_id": "5ffd0b5cf5cba2652ab27195",
                          "quantity": 50
                        }
                      ],
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": true,
                        "nut_free": false,
                        "dairy_free": true
                      },
                      "variant": "chocolate",
                      "total_quantity": 50,
                      "on_hand": 5
                    },
                    {
                      "_id": "603637cbd9ea062581df00b2",
                      "name": "Googys, Collagen Protein Bar, Mixed Berry",
                      "description": "20 Googys, Collagen Protein Bar to satisfy your taste buds",
                      "price": 2912,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614572060/Googys-Collagen-Protein-Bar-Mixed-Berry.jpg",
                      "preset_products": [
                        {
                          "_id": "603634ead9ea062581df00b1",
                          "quantity": 20
                        }
                      ],
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": false,
                        "nut_free": false,
                        "dairy_free": true
                      },
                      "variant": "Mixed Berry",
                      "total_quantity": 20,
                      "on_hand": 9
                    },
                    {
                      "_id": "609e2c1fc149f8772db5b45d",
                      "name": "Test product 1",
                      "description": "This is a test product",
                      "price": 1050,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1620977988/sample%20products/TestProduct1.png",
                      "preset_products": [
                        {
                          "_id": "609e2b02c149f8772db5b459",
                          "quantity": 20
                        }
                      ],
                      "nutrition_information": {
                        "gluten_free": true,
                        "vegan": false,
                        "nut_free": false,
                        "dairy_free": true
                      },
                      "variant": "variant 1",
                      "total_quantity": 20,
                      "on_hand": 10
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/snackproud/MonthlyRefill/{box_id}": {
      "get": {
        "tags": [
          "8 - Seller - Buy Product"
        ],
        "summary": "8.2 - Get monthly refills.",
        "description": "Get list of monthly refills that seller can buy. Returned list is ordered by price.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "id of the box this list is relivant to.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "609e23c3c149f8772db5b456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with containing a list of item a seller can buy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monthly_refill_to_buy_seller"
                },
                "example": {
                  "products": [
                    {
                      "_id": "608e1eebc149f8772db5b455",
                      "name": "80 piece",
                      "description": "A collection of delicious snacks for your monthly refill",
                      "price": 18900,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614571845/monthly-refill-box.png",
                      "preset_products": [
                        {
                          "_id": "603634ead9ea062581df00b1",
                          "quantity": 20
                        },
                        {
                          "_id": "6036334fd9ea062581df00b0",
                          "quantity": 10
                        }
                      ],
                      "type": "Monthly refill",
                      "total_quantity": 30,
                      "on_hand": 19
                    },
                    {
                      "_id": "603b2f5ad9ea062581df00b5",
                      "name": "50 piece",
                      "description": "A collection of delicious snacks for your monthly refill",
                      "price": 12500,
                      "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614571845/monthly-refill-box.png",
                      "preset_products": [
                        {
                          "_id": "603634ead9ea062581df00b1",
                          "quantity": 20
                        },
                        {
                          "_id": "6036334fd9ea062581df00b0",
                          "quantity": 10
                        }
                      ],
                      "type": "Monthly refill",
                      "total_quantity": 30,
                      "on_hand": 19
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/snackproud/products/order": {
      "post": {
        "tags": [
          "8 - Seller - Buy Product"
        ],
        "summary": "8.3 - Create order for refill products.",
        "description": "Create an order to refill boxes with refill products.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refill_order"
              },
              "example": [
                {
                  "box_id": "609e23c3c149f8772db5b456",
                  "cart": [
                    {
                      "_id": "608e1eebc149f8772db5b455",
                      "quantity": 1
                    },
                    {
                      "_id": "609e2c1fc149f8772db5b45d",
                      "quantity": 4
                    }
                  ],
                  "order_details": {
                    "name": "Jimmy Johnson",
                    "address": {
                      "address_line1": "address_line1",
                      "address_line2": "address_line2",
                      "country": "Australia",
                      "city": "Waterloo",
                      "state": "NSW",
                      "zip": "2017"
                    },
                    "phone": "123456789",
                    "email": "some@some.com",
                    "instructions": "Please deliver it fast"
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order was successfully processed"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/snackproud/boxes": {
      "get": {
        "tags": [
          "9 - Seller - Buy Box"
        ],
        "summary": "9.1 - Get boxes avaliable to buy.",
        "description": "Get all boxes avaliable to buy",
        "responses": {
          "200": {
            "description": "Successfully retireved boxes avaliable to buy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/snackproud/boxes/{box_id}/order": {
      "post": {
        "tags": [
          "9 - Seller - Buy Box"
        ],
        "summary": "9.2 - Create order for a box.",
        "description": "This will send an order off for a box.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "id of the box to order.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "5ffd2581f5cba2652ab27198"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_6"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order was successfully processed"
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Unable to find box/s"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/auth/login": {
      "patch": {
        "tags": [
          "10 - Authentication"
        ],
        "summary": "10.1 - Change email and/or password",
        "description": "This api will allow you to change the currently authenticated users, username or password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_7"
              },
              "examples": {
                "Change passoword": {
                  "summary": "Change password",
                  "value": {
                    "password": "Password@123"
                  }
                },
                "Change email": {
                  "summary": "Change email",
                  "value": {
                    "email": "newEmail@hotmail.com"
                  }
                },
                "Change both password and email": {
                  "summary": "Change email and password",
                  "value": {
                    "email": "newEmail@hotmail.com",
                    "password": "Password@123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users details changed successfully"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Email already in use": {
                    "summary": "Email already in use",
                    "value": {
                      "message": "The specified new email already exists"
                    }
                  },
                  "Invalid email": {
                    "summary": "Invalid email",
                    "value": {
                      "message": "Payload validation error: 'Object didn't pass validation for format email: 1 on property email (Email address of this user)."
                    }
                  },
                  "Password too weak": {
                    "summary": "Password too weak",
                    "value": {
                      "message": "PasswordStrengthError: Password is too weak"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/cart": {
      "get": {
        "tags": [
          "11 - Seller - Cart"
        ],
        "summary": "11.1 - Get entire seller cart",
        "description": "This api will retrieve the entire cart for every box.",
        "responses": {
          "200": {
            "description": "Retrieved entire cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_8"
                },
                "example": {
                  "box_carts": [
                    {
                      "cart": [
                        {
                          "_id": "603637cbd9ea062581df00b2",
                          "name": "Googys, Collagen Protein Bar, Mixed Berry",
                          "description": "20 Googys, Collagen Protein Bar to satisfy your taste buds",
                          "price": 2912,
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614572060/Googys-Collagen-Protein-Bar-Mixed-Berry.jpg",
                          "pack_size": 20,
                          "quantity": 12,
                          "variant": "Mixed Berry",
                          "nutrition_information": {
                            "gluten_free": true,
                            "vegan": false,
                            "nut_free": false,
                            "dairy_free": true
                          }
                        }
                      ],
                      "box_info": {
                        "_id": "609e23c3c149f8772db5b456",
                        "name": "Level 1 Box"
                      }
                    }
                  ],
                  "cart_total": 34944
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "11 - Seller - Cart"
        ],
        "summary": "11.2 - Remove cart item",
        "description": "This api will remove an item in the users cart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_8"
              },
              "example": {
                "product_id": "609e2c1fc149f8772db5b45d",
                "box_id": "609e23f7c149f8772db5b458"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "404": {
            "description": "Could not find something exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Product does not exist": {
                    "summary": "Product does not exist",
                    "value": {
                      "message": "Product not found"
                    }
                  },
                  "Box does not exist": {
                    "summary": "Box does not exist",
                    "value": {
                      "message": "Box not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/cart/size": {
      "get": {
        "tags": [
          "11 - Seller - Cart"
        ],
        "summary": "11.3 - Get cart size",
        "description": "This api will return the total number of products currently in the users cart",
        "responses": {
          "200": {
            "description": "Retrieved cart size successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                },
                "example": {
                  "cart_size": 1
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/seller/cart/{box_id}": {
      "get": {
        "tags": [
          "11 - Seller - Cart"
        ],
        "summary": "11.4 - Get cart for single box",
        "description": "This api will retrieve the cart for a single box.",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "ID of the box you want the cart for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "609e23f7c149f8772db5b458"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved box cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                },
                "examples": {
                  "empty cart": {
                    "summary": "Empty cart",
                    "value": {
                      "box_cart": [],
                      "cart_total": 0
                    }
                  },
                  "cart with single item": {
                    "summary": "Cart with an item in it",
                    "value": {
                      "box_cart": [
                        {
                          "_id": "603637cbd9ea062581df00b2",
                          "name": "Googys, Collagen Protein Bar, Mixed Berry",
                          "description": "20 Googys, Collagen Protein Bar to satisfy your taste buds",
                          "price": 2912,
                          "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1614572060/Googys-Collagen-Protein-Bar-Mixed-Berry.jpg",
                          "pack_size": 20,
                          "quantity": 11,
                          "variant": "Mixed Berry",
                          "nutrition_information": {
                            "gluten_free": true,
                            "vegan": false,
                            "nut_free": false,
                            "dairy_free": true
                          }
                        }
                      ],
                      "cart_total": 32032
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Box does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "message": "Box not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "11 - Seller - Cart"
        ],
        "summary": "11.5 - Add/update cart item",
        "description": "This api will add/update an item in the users cart",
        "parameters": [
          {
            "name": "box_id",
            "in": "path",
            "description": "ID of the box that item is being ordered for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "609e23f7c149f8772db5b458"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/body_9"
              },
              "example": {
                "product_id": "603637cbd9ea062581df00b2",
                "quantity": 11
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                },
                "example": {
                  "cart_size": 1
                }
              }
            }
          },
          "404": {
            "description": "Could not find something exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Product does not exist": {
                    "summary": "Product does not exist",
                    "value": {
                      "message": "Product not found"
                    }
                  },
                  "Box does not exist": {
                    "summary": "Box does not exist",
                    "value": {
                      "message": "Box not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human readable description of what went wrong"
          },
          "feilds": {
            "type": "array",
            "description": "A list of feild that where incorrectly inputted (Only included if applicable)",
            "items": {
              "type": "string"
            }
          },
          "reasons": {
            "type": "array",
            "description": "Reason why each feild was rejected (Only included if feild exists)",
            "items": {
              "$ref": "#/components/schemas/error_reasons"
            }
          },
          "success": {
            "type": "boolean",
            "description": "A boolean to identify weather an operation was complete or not (Only included if applicable)"
          }
        }
      },
      "user_address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "There users street address"
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "country": {
            "type": "string",
            "description": "The users country"
          },
          "city": {
            "type": "string",
            "description": "The users city"
          },
          "state": {
            "type": "string",
            "description": "The users state"
          },
          "zip": {
            "type": "string",
            "description": "The users zip code"
          }
        }
      },
      "delivery_address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "There delivery street address"
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "country": {
            "type": "string",
            "description": "The delivery country"
          },
          "city": {
            "type": "string",
            "description": "The delivery city"
          },
          "state": {
            "type": "string",
            "description": "The delivery state"
          },
          "zip": {
            "type": "string",
            "description": "The delivery zip code"
          }
        }
      },
      "base_product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The id of the product."
          },
          "name": {
            "type": "string",
            "description": "Name of the product."
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "variant": {
            "type": "string",
            "description": "The variant of the snack."
          },
          "price": {
            "type": "number",
            "description": "Cost of the product (in cents)."
          },
          "image_url": {
            "type": "string",
            "description": "url of the image on the CDN"
          },
          "nutrition_information": {
            "$ref": "#/components/schemas/base_product_nutrition_information"
          }
        }
      },
      "refill_order": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/refill_order_inner"
        }
      },
      "cart_for_buyer": {
        "type": "object",
        "properties": {
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cart_for_buyer_cart"
            }
          }
        },
        "description": "List of items intended to buy"
      },
      "payment_intent_for_buyer": {
        "type": "object",
        "properties": {
          "client_secret": {
            "type": "string",
            "description": "The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n\nThe client secret can be used to complete a payment from your frontend."
          },
          "price": {
            "type": "number",
            "description": "Total for the cart computed at the back-end (in cents)."
          }
        },
        "description": "Required Stripe information to complete a purchase for a buyer."
      },
      "product_for_buyer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/base_product"
          },
          {
            "type": "object",
            "properties": {
              "avaliable": {
                "type": "integer",
                "description": "Number of product avaliable."
              }
            }
          }
        ]
      },
      "box_details_for_buyer": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "box_id"
          },
          "name": {
            "type": "string",
            "description": "name of the box"
          }
        }
      },
      "user_data": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The users first name."
          },
          "last_name": {
            "type": "string",
            "description": "The users last name."
          },
          "dob": {
            "type": "string",
            "description": "The persons date of birth in ISO format."
          },
          "address": {
            "$ref": "#/components/schemas/user_address"
          },
          "account_type": {
            "type": "string",
            "description": "The Stripe account type linked to this account. Not for use in current phase by front-end.",
            "enum": [
              "individual",
              "company"
            ]
          },
          "account_for": {
            "type": "string",
            "description": "What is the account for (what was selected during sign-up).",
            "enum": [
              "Personal",
              "company"
            ]
          },
          "account_for_name": {
            "type": "string",
            "description": "The summary description that mapped to account_for during sign-up"
          },
          "fundraising": {
            "type": "string",
            "description": "A feild that will only exist if the user selected fundraising during sign-up"
          },
          "account_num_last_4": {
            "type": "string",
            "description": "The last four digits of the users account."
          },
          "BSB": {
            "type": "string",
            "description": "The BSB for the users bank account"
          },
          "contact_number": {
            "type": "string",
            "description": "Account phone number"
          },
          "email": {
            "type": "string",
            "description": "contact email for account"
          },
          "image_name": {
            "type": "string",
            "description": "name of the last image that was sent to Stripe"
          }
        }
      },
      "delivery_data": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/delivery_data_address"
          },
          "instructions": {
            "type": "string",
            "description": "Any custom instructions the user has delivery."
          },
          "name": {
            "type": "string",
            "description": "person to deliver it to name"
          },
          "phone": {
            "type": "string",
            "description": "contact delivery phone number"
          },
          "email": {
            "type": "string",
            "description": "delivery contact/invoice email"
          }
        }
      },
      "box_details_seller": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the box requested"
          },
          "name": {
            "type": "string",
            "description": "name of the box"
          },
          "new": {
            "type": "boolean",
            "description": "Is the box new"
          },
          "topping_up": {
            "type": "boolean",
            "description": "Is the box being topped up"
          }
        },
        "description": "Basic box details"
      },
      "box_stats_seller": {
        "type": "object",
        "properties": {
          "last_updated": {
            "type": "string",
            "description": "when the box was last updated"
          },
          "most_popular": {
            "type": "string",
            "description": "most popular snack"
          },
          "sold": {
            "type": "integer"
          },
          "profit": {
            "type": "number"
          },
          "available": {
            "type": "integer"
          }
        }
      },
      "box_specific_stats_seller": {
        "type": "object",
        "properties": {
          "last_updated": {
            "type": "string",
            "description": "Date the box was last updated."
          },
          "total_sold_since_update": {
            "type": "integer",
            "description": "Total snacks sold since box was last updated."
          },
          "total_profit_since_update": {
            "type": "number",
            "description": "Total profit since box was last updated."
          },
          "sold": {
            "type": "integer",
            "description": "Total number of snacks sold since date_enum."
          },
          "profit": {
            "type": "number",
            "description": "Total profit since date_enum."
          },
          "available": {
            "type": "integer",
            "description": "Total number of product avaliable."
          },
          "has_made_sale": {
            "type": "boolean",
            "description": "Has the box ever made a sale."
          }
        }
      },
      "product_details_for_buyer_in_box": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "the product ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "variant": {
            "type": "string",
            "description": "The product variant type"
          },
          "description": {
            "type": "string",
            "description": "The product description"
          },
          "active": {
            "type": "boolean",
            "description": "is the product active"
          },
          "image_url": {
            "type": "string",
            "description": "The image url of the product"
          },
          "price": {
            "type": "number",
            "description": "The current selling price for the product"
          },
          "available": {
            "type": "number",
            "description": "Number of the product avaliable"
          },
          "nutrition_information": {
            "$ref": "#/components/schemas/product_details_for_buyer_in_box_nutrition_information"
          },
          "rrp": {
            "type": "number",
            "description": "The default price for a product"
          },
          "low_rrp": {
            "type": "number",
            "description": "lowest recommended sell price"
          },
          "high_rrp": {
            "type": "number",
            "description": "highest recommended sell price"
          },
          "sold": {
            "type": "integer",
            "description": "number of this product sold"
          },
          "request_count": {
            "type": "integer",
            "description": "number of requests for an item. This is currently a placeholder for furutre development and should be ignored."
          }
        }
      },
      "monthly_refill_to_buy_seller": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/base_product"
                },
                {
                  "type": "object",
                  "properties": {
                    "preset_products": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "description": "id of the preset product"
                        },
                        "quantity": {
                          "type": "integer",
                          "description": "Number of this product provided"
                        }
                      },
                      "description": "All products that are included in this item"
                    },
                    "total_quantity": {
                      "type": "integer",
                      "description": "Total number of products to be added by this item if bought"
                    },
                    "on_hand": {
                      "type": "integer",
                      "description": "Total number of snacks owned inside this item."
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of product. This is not currently relivant for this stage."
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "products_to_buy_seller": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/base_product"
                },
                {
                  "type": "object",
                  "properties": {
                    "preset_products": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "description": "id of the preset product"
                        },
                        "quantity": {
                          "type": "integer",
                          "description": "Number of this product provided"
                        }
                      },
                      "description": "All products that are included in this item"
                    },
                    "total_quantity": {
                      "type": "integer",
                      "description": "Total number of products to be added by this item if bought"
                    },
                    "on_hand": {
                      "type": "integer",
                      "description": "Total number of snacks owned inside this item."
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "box_refill_order_data": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the order"
          },
          "date": {
            "type": "string",
            "description": "Date the order was made in ISO date format."
          },
          "invoice_num": {
            "type": "string",
            "description": "The invoice number."
          },
          "num_of_products": {
            "type": "integer",
            "description": "number of products bought"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/box_refill_order_data_products"
            }
          }
        }
      },
      "inline_response_200": {
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product_for_buyer"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/box_details_for_buyer"
          }
        ]
      },
      "body": {
        "type": "object",
        "example": {
          "cart": [
            {
              "_id": "6036316c91c3a71f255544ad",
              "quantity": 1
            },
            {
              "_id": "6036394306a138204d1b79be",
              "quantity": 3
            }
          ]
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/cart_for_buyer"
          }
        ]
      },
      "inline_response_200_1": {
        "example": {
          "client_secret": "pi_1IaJC6HHvC6AAOnBDuMQnwLu_secret_oQszKZNoSmnakBC963WRlVVYr",
          "price": 2390
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/payment_intent_for_buyer"
          }
        ]
      },
      "inline_response_200_2": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "id of the pending account"
          },
          "user": {
            "$ref": "#/components/schemas/inline_response_200_2_user"
          },
          "delivery": {
            "$ref": "#/components/schemas/inline_response_200_2_delivery"
          },
          "box_details": {
            "$ref": "#/components/schemas/inline_response_200_2_box_details"
          }
        }
      },
      "body_1": {
        "required": [
          "account_for",
          "account_for_name",
          "address_city",
          "address_country",
          "address_line1",
          "address_line2",
          "address_postal_code",
          "address_state",
          "bank_BSB",
          "bank_account_number",
          "contact_number",
          "dlvr_address_city",
          "dlvr_address_country",
          "dlvr_address_line1",
          "dlvr_address_line2",
          "dlvr_address_postal_code",
          "dlvr_address_state",
          "dlvr_email",
          "dlvr_instructions",
          "dlvr_name",
          "dlvr_phone",
          "dob_day",
          "dob_month",
          "dob_year",
          "email",
          "first_name",
          "last_name",
          "personal_identification"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Persons first name."
          },
          "last_name": {
            "type": "string",
            "description": "Persons last name."
          },
          "contact_number": {
            "type": "string",
            "description": "Account phone number"
          },
          "email": {
            "type": "string",
            "description": "contact email for account"
          },
          "personal_identification": {
            "type": "string",
            "description": "The individual’s verification document information.\n\nAn identifying document, either a passport or local ID card.\n\nThe uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size.",
            "format": "base64"
          },
          "dob_day": {
            "type": "string",
            "description": "day of birth"
          },
          "dob_month": {
            "type": "string",
            "description": "month of birth"
          },
          "dob_year": {
            "type": "string",
            "description": "year of birth"
          },
          "address_line1": {
            "type": "string",
            "description": "street address of the individual is located in."
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "address_postal_code": {
            "type": "string",
            "description": "The zip code of the individual is located in."
          },
          "address_city": {
            "type": "string",
            "description": "The city the individual is located in."
          },
          "address_state": {
            "type": "string",
            "description": "The state the individual is located in."
          },
          "address_country": {
            "type": "string",
            "description": "The country the individual is located in."
          },
          "account_for": {
            "type": "string",
            "description": "Is the account for Personal account or Buiness account. Enum = [Personal, Business]",
            "enum": [
              "Personal",
              "Business"
            ]
          },
          "account_for_name": {
            "type": "string",
            "description": "Name related to the ownership type of the account"
          },
          "fundraising_name": {
            "type": "string",
            "description": "Fundraiser name."
          },
          "bank_BSB": {
            "type": "string",
            "description": "The BSB for the bank account for funds to be transfered to."
          },
          "bank_account_number": {
            "type": "string",
            "description": "The account number for the bank account for funds to be transfered to."
          },
          "dlvr_address_line1": {
            "type": "string",
            "description": "street address to deliver to."
          },
          "dlvr_address_line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "dlvr_address_postal_code": {
            "type": "string",
            "description": "The zip code to deliver to."
          },
          "dlvr_address_city": {
            "type": "string",
            "description": "The city to deliver to."
          },
          "dlvr_address_state": {
            "type": "string",
            "description": "The state to deliver to."
          },
          "dlvr_address_country": {
            "type": "string",
            "description": "The to deliver to."
          },
          "dlvr_instructions": {
            "type": "string",
            "description": "Delivery instructions"
          },
          "dlvr_name": {
            "type": "string",
            "description": "Person name to recieve the delivery."
          },
          "dlvr_phone": {
            "type": "string",
            "description": "Contact number for delivery."
          },
          "dlvr_email": {
            "type": "string",
            "description": "Contact email for delivery."
          },
          "pending_acc_id": {
            "type": "string",
            "description": "id used to get pending account info details on the pending box info (required if preset_box_ID is given)."
          },
          "preset_box_ID": {
            "type": "string",
            "description": "ID of the box to create when creating the users account."
          },
          "box_name": {
            "type": "string",
            "description": "New name for the box."
          }
        }
      },
      "body_2": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Persons first name."
          },
          "last_name": {
            "type": "string",
            "description": "Persons last name."
          },
          "personal_identification": {
            "type": "string",
            "description": "The individual’s verification document information.\n\nAn identifying document, either a passport or local ID card.\n\nThe uploaded file needs to be a color image (smaller than 8,000px by 8,000px), in JPG, PNG, or PDF format, and less than 10 MB in size.",
            "format": "base64"
          },
          "dob_day": {
            "type": "string",
            "description": "day of birth"
          },
          "dob_month": {
            "type": "string",
            "description": "month of birth"
          },
          "dob_year": {
            "type": "string",
            "description": "year of birth"
          },
          "address_line1": {
            "type": "string",
            "description": "street address of the individual is located in."
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "address_postal_code": {
            "type": "string",
            "description": "The zip code of the individual is located in."
          },
          "address_city": {
            "type": "string",
            "description": "The city the individual is located in."
          },
          "address_state": {
            "type": "string",
            "description": "The state the individual is located in."
          },
          "address_country": {
            "type": "string",
            "description": "The country the individual is located in."
          },
          "account_for": {
            "type": "string",
            "description": "Is the account for Personal account or Buiness account. Enum = [Personal, Business]",
            "enum": [
              "Personal",
              "Business"
            ]
          },
          "account_for_name": {
            "type": "string",
            "description": "Name related to the ownership type of the account"
          },
          "fundraising_name": {
            "type": "string",
            "description": "Fundraiser name."
          },
          "bank_BSB": {
            "type": "string",
            "description": "The BSB for the bank account for funds to be transfered to."
          },
          "bank_account_number": {
            "type": "string",
            "description": "The account number for the bank account for funds to be transfered to."
          },
          "contact_number": {
            "type": "string",
            "description": "Account phone number"
          },
          "email": {
            "type": "string",
            "description": "contact email for account"
          }
        }
      },
      "body_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/delivery_data"
          },
          {
            "example": {
              "address": {
                "address_line1": "address_full_match",
                "country": "AU",
                "city": "Waterloo",
                "state": "NSW",
                "zip": "2017"
              },
              "instructions": "Some instructions",
              "name": "Jim john",
              "phone": "0000000000",
              "email": "e@e.com"
            }
          }
        ]
      },
      "accountorderHistory_customer_box": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the box the order is relevant to."
          },
          "name": {
            "type": "string",
            "description": "Name of the box this order is relevant to."
          }
        }
      },
      "accountorderHistory_products": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Snack proud product ID that was ordered."
          },
          "price": {
            "type": "integer",
            "description": "Price each individual item was bought for (in cents)."
          },
          "quantity": {
            "type": "integer",
            "description": "Number of the products bought."
          }
        }
      },
      "inline_response_200_3": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The order id"
          },
          "date": {
            "type": "string",
            "description": "The date the order was placed"
          },
          "invoice_num": {
            "type": "string",
            "description": "The invoice number for the order. If no invoice number has been assigned then value will be \"pending\"."
          },
          "invoice_download": {
            "type": "string",
            "description": "A url to the invoice. This only exists if the invoice exists in the system."
          },
          "num_of_products": {
            "type": "integer",
            "description": "Total number of products ordered."
          },
          "customer_box": {
            "$ref": "#/components/schemas/accountorderHistory_customer_box"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accountorderHistory_products"
            }
          }
        }
      },
      "inline_response_200_4": {
        "type": "object",
        "properties": {
          "box_id": {
            "type": "string",
            "description": "The id of the box the order was for"
          },
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_4_cart"
            }
          }
        }
      },
      "inline_response_200_5": {
        "type": "object",
        "properties": {
          "num_of_boxes": {
            "type": "integer",
            "description": "Number of boxes owned."
          },
          "sold": {
            "type": "integer",
            "description": "Total number of sales."
          },
          "profit": {
            "type": "integer",
            "description": "Total profit in cents."
          }
        }
      },
      "inline_response_200_6": {
        "type": "object",
        "properties": {
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_6_leaderboard"
            }
          }
        }
      },
      "body_4": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name of the box."
          },
          "new": {
            "type": "boolean",
            "description": "Set new status."
          }
        }
      },
      "sellerproducts_updates": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the item to update."
          },
          "available": {
            "type": "integer",
            "description": "New number of avaliable for the given item."
          },
          "price": {
            "type": "number",
            "description": "New price for the product."
          },
          "active": {
            "type": "boolean",
            "description": "Is the product visable to buyers."
          }
        }
      },
      "body_5": {
        "type": "object",
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sellerproducts_updates"
            }
          }
        }
      },
      "inline_response_200_7": {
        "type": "object",
        "properties": {
          "boxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_7_boxes"
            }
          }
        },
        "example": {
          "boxes": [
            {
              "_id": "5ffd2581f5cba2652ab27198",
              "name": "80 piece snack box with display",
              "description": "A snack box with 80 items in it.",
              "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1610441579/empty_box.png",
              "price": 18900,
              "rrp": 25000
            },
            {
              "_id": "5ffc1cf7820e93259f6a4d97",
              "name": "50 piece snack box with display",
              "description": "A Snack box with with 50 items in it.",
              "image_url": "https://res.cloudinary.com/snackproud/image/upload/v1610441704/Snack-Proud-Office-Snack-Box.jpg",
              "price": 12500,
              "rrp": 20000
            }
          ]
        }
      },
      "body_6": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the new box"
          },
          "delivery_info": {
            "$ref": "#/components/schemas/delivery_data"
          }
        },
        "example": {
          "name": "My first box",
          "delivery_info": {
            "address": {
              "address_line1": "1 Some address",
              "address_line2": "12",
              "country": "Australia",
              "city": "Sydney CBD",
              "state": "NSW",
              "zip": "2000"
            },
            "instructions": "Please be careful",
            "name": "Jimmy john",
            "phone": "1234567890",
            "email": "email@email.com"
          }
        }
      },
      "body_7": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "A valid email address"
          },
          "password": {
            "type": "string",
            "description": "A valid password"
          }
        }
      },
      "inline_response_200_8": {
        "type": "object",
        "properties": {
          "box_carts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_8_box_carts"
            }
          },
          "cart_total": {
            "type": "integer",
            "description": "Total cost of all items in the cart"
          }
        }
      },
      "body_8": {
        "required": [
          "box_id",
          "product_id"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "description": "ID of the product to remove for the given box"
          },
          "box_id": {
            "type": "string",
            "description": "ID of the box which the product is in"
          }
        }
      },
      "inline_response_200_9": {
        "type": "object",
        "properties": {
          "cart_size": {
            "type": "integer",
            "description": "The total number of products in the cart"
          }
        }
      },
      "inline_response_200_10": {
        "type": "object",
        "properties": {
          "box_cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_8_cart"
            }
          },
          "cart_total": {
            "type": "integer",
            "description": "Total cost of all items in the cart"
          }
        }
      },
      "body_9": {
        "required": [
          "product_id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "description": "ID of the product to add/update in the users cart"
          },
          "quantity": {
            "type": "integer",
            "description": "number of the product to buy"
          }
        }
      },
      "error_reasons": {
        "type": "object",
        "properties": {
          "feild": {
            "type": "string",
            "description": "Feild this message pertains to"
          },
          "message": {
            "type": "string",
            "description": "What was wrong with the given feild"
          },
          "input_given": {
            "type": "string",
            "description": "The input the system recieved."
          }
        }
      },
      "base_product_nutrition_information": {
        "type": "object",
        "properties": {
          "gluten_free": {
            "type": "boolean",
            "description": "Is the product gluten free?"
          },
          "vegan": {
            "type": "boolean",
            "description": "Is the product vegan?"
          },
          "nut_free": {
            "type": "boolean",
            "description": "Is the product nut free?"
          },
          "dairy_free": {
            "type": "boolean",
            "description": "Is the product dairy free?"
          }
        },
        "description": "Nutrition information for the item"
      },
      "refill_order_inner": {
        "type": "object",
        "properties": {
          "box_id": {
            "type": "string",
            "description": "ID of the box this set of orders are for."
          },
          "cart": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the item to order"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Number of the item to buy"
                }
              },
              "description": "Array list of items to order"
            }
          },
          "order_details": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the person recieving the order"
              },
              "address": {
                "type": "object",
                "description": "delivery address details",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/delivery_address"
                  }
                ]
              },
              "phone": {
                "type": "string",
                "description": "Contact number for delivery"
              },
              "email": {
                "type": "string",
                "description": "Contact email for delivery"
              },
              "instructions": {
                "type": "string",
                "description": "Instructions for the delivery."
              }
            },
            "description": "Delivery details"
          }
        }
      },
      "cart_for_buyer_cart": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the product to purchase"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product to buy"
          }
        }
      },
      "delivery_data_address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "The users delivery street address"
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "country": {
            "type": "string",
            "description": "the users delivery country"
          },
          "city": {
            "type": "string",
            "description": "the users delivery city"
          },
          "state": {
            "type": "string",
            "description": "the users delivery state"
          },
          "zip": {
            "type": "string",
            "description": "the users delivery zip code"
          }
        }
      },
      "product_details_for_buyer_in_box_nutrition_information": {
        "type": "object",
        "properties": {
          "gluten_free": {
            "type": "boolean",
            "description": "Is the product gluten free?"
          },
          "vegan": {
            "type": "boolean",
            "description": "Is the product vegan?"
          },
          "nut_free": {
            "type": "boolean",
            "description": "Is the product nut free?"
          },
          "dairy_free": {
            "type": "boolean",
            "description": "Is the product dairy free?"
          }
        },
        "description": "All the nutrition information"
      },
      "box_refill_order_data_products": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the snack proud product"
          },
          "price": {
            "type": "number",
            "description": "price the item was bought for"
          },
          "quantity": {
            "type": "integer",
            "description": "number of the product bought"
          }
        }
      },
      "inline_response_200_2_user_dob": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "description": "Day user was born"
          },
          "month": {
            "type": "integer",
            "description": "Month user was born"
          },
          "year": {
            "type": "integer",
            "description": "Year user was born"
          }
        },
        "description": "Users date of birth"
      },
      "inline_response_200_2_user": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "persons first name"
          },
          "last_name": {
            "type": "string",
            "description": "persons last name"
          },
          "contact_number": {
            "type": "string",
            "description": "account phone number"
          },
          "email": {
            "type": "string",
            "description": "account email"
          },
          "dob": {
            "$ref": "#/components/schemas/inline_response_200_2_user_dob"
          },
          "address": {
            "$ref": "#/components/schemas/user_address"
          },
          "account_for": {
            "type": "string",
            "enum": [
              "Personal",
              "Business"
            ]
          },
          "account_for_name": {
            "type": "string",
            "description": "What is the account for in relation to the account_for feild"
          },
          "fundraising_name": {
            "type": "string",
            "description": "Name of funderaiser if they are for a fundraiser"
          },
          "bank_bsb": {
            "type": "string",
            "description": "Users bsb for there bank account"
          },
          "bank_account_number": {
            "type": "string",
            "description": "bank account number for user"
          }
        },
        "description": "user details for new user"
      },
      "inline_response_200_2_delivery": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/delivery_address"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions for delivery"
          },
          "name": {
            "type": "string",
            "description": "Persons name for delivery"
          },
          "phone": {
            "type": "string",
            "description": "Delivery phone number"
          },
          "email": {
            "type": "string",
            "description": "Delivery/invoice email address"
          }
        },
        "description": "Delivery details for new user"
      },
      "inline_response_200_2_box_details": {
        "type": "object",
        "properties": {
          "preset_box_ID": {
            "type": "string",
            "description": "ID of the box to create when creating the users account"
          },
          "name": {
            "type": "string",
            "description": "New name for the box"
          }
        },
        "description": "create box for new account details"
      },
      "inline_response_200_4_product": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the item to buy"
          },
          "name": {
            "type": "string",
            "description": "name of the item"
          },
          "description": {
            "type": "string",
            "description": "description of them item"
          },
          "price": {
            "type": "integer",
            "description": "Price of the item in cents"
          },
          "image_url": {
            "type": "string",
            "description": "A url for the CDN containing the image"
          },
          "total_quantity": {
            "type": "integer",
            "description": "The total pack size of the product"
          }
        }
      },
      "inline_response_200_4_cart": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/inline_response_200_4_product"
          },
          "quantity": {
            "type": "integer",
            "description": "number of the product that was order"
          }
        }
      },
      "inline_response_200_6_leaderboard": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "sold": {
            "type": "number",
            "description": "total number of the product solde for the week (or given period if date_enum is provided)"
          },
          "variant": {
            "type": "string",
            "description": "Variant of the item"
          },
          "image_url": {
            "type": "string",
            "description": "url that contains an image of the item"
          }
        }
      },
      "inline_response_200_7_boxes": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the box avaliable to order"
          },
          "name": {
            "type": "string",
            "description": "Name of the box"
          },
          "description": {
            "type": "string",
            "description": "Description of the box"
          },
          "image_url": {
            "type": "string",
            "description": "image url for the box"
          },
          "price": {
            "type": "integer",
            "description": "cost of the box in cents"
          },
          "rrp": {
            "type": "integer",
            "description": "The normal cost of the box"
          }
        }
      },
      "inline_response_200_8_cart": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The id of the product."
          },
          "name": {
            "type": "string",
            "description": "Name of the product."
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "variant": {
            "type": "string",
            "description": "The variant of the snack."
          },
          "price": {
            "type": "number",
            "description": "Cost of the product (in cents)."
          },
          "image_url": {
            "type": "string",
            "description": "url of the image on the CDN"
          },
          "nutrition_information": {
            "$ref": "#/components/schemas/base_product_nutrition_information"
          },
          "pack_size": {
            "type": "integer",
            "description": "Total number of products to be added by this item if bought"
          },
          "quantity": {
            "type": "integer",
            "description": "Total number of this item being bought"
          }
        }
      },
      "inline_response_200_8_box_info": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the box this cart is for"
          },
          "name": {
            "type": "string",
            "description": "name of the box this cart is for"
          }
        }
      },
      "inline_response_200_8_box_carts": {
        "type": "object",
        "properties": {
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_8_cart"
            }
          },
          "box_info": {
            "$ref": "#/components/schemas/inline_response_200_8_box_info"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}